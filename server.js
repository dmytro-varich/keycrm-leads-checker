// server.js ‚Äî –ø—Ä–æ—Å—Ç–æ–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏–∑ KeyCRM
// –¢—Ä–µ–±—É–µ—Ç—Å—è Node >= 18 (–µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch).
const express = require("express");
const cors = require("cors");
const morgan = require("morgan");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;
const BASE_URL = "https://openapi.keycrm.app/v1";
const KEYCRM_API_KEY = process.env.KEYCRM_API_KEY;

// --- middleware
app.use(cors({
    origin: [
        'http://localhost:3000',
        'http://localhost:8080',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:8080',
        'http://localhost:5500',
        'http://127.0.0.1:5500',
        'https://dmytro-varich.github.io'
    ],
    methods: ['GET', 'POST', 'OPTIONS'],
    credentials: true,
    optionsSuccessStatus: 200
}));
app.use(express.json({ limit: "5mb" }));
app.use(morgan("dev"));

// --- —É—Ç–∏–ª–∏—Ç—ã
const ensureArray = (v) =>
    Array.isArray(v) ? v.filter(Boolean) : v ? [v] : [];

const toArray = (j) => {
    if (Array.isArray(j)) return j;
    if (j && j.data) return j.data;
    if (j && j.items) return j.items;
    return [];
};

const normalizeUaPhone = (phone) => {
    let s = String(phone || "").trim();
    if (!s) return "";
    s = s.replace(/[\s()-]/g, "");
    if (s.startsWith("00")) s = "+" + s.slice(2);
    if (s.startsWith("+380")) return s;
    if (/^380\d{9}$/.test(s)) return "+" + s;
    if (/^0\d{9}$/.test(s)) return "+38" + s; // 0XXXXXXXXX -> +380XXXXXXXXX
    if (s.startsWith("+")) return s; // –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return s;
};
const normalizeEmail = (email) =>
    String(email || "")
    .trim()
    .toLowerCase();

async function keycrm(path, { method = "GET", headers = {}, body } = {}) {
    if (!KEYCRM_API_KEY) throw new Error("KEYCRM_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");

    const res = await fetch(
        path.startsWith("http") ? path : `${BASE_URL}${path}`, {
            method,
            headers: {
                Authorization: `Bearer ${KEYCRM_API_KEY}`,
                "Content-Type": "application/json",
                ...headers,
            },
            body: body ? JSON.stringify(body) : undefined,
        }
    );

    const text = await res.text();
    const json = text ? JSON.parse(text) : null;

    if (!res.ok) {
        const msg =
            (json && json.message) || (json && json.error) || res.statusText;
        throw new Error(`KeyCRM ${method} ${path} -> ${res.status}: ${msg}`);
    }
    return json;
}

// --- –ö–µ—à –∫–æ–º–ø–∞–Ω–∏–π –≤ Map (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID)
const companiesCache = new Map(); // Map<companyId, companyData>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ ID (—Å –∫–µ—à–µ–º)
async function getCompanyById(companyId) {
    if (!companyId) return null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (companiesCache.has(companyId)) {
        console.log(`üì¶ –ö–æ–º–ø–∞–Ω–∏—è ${companyId} –≤–∑—è—Ç–∞ –∏–∑ –∫–µ—à–∞`);
        return companiesCache.get(companyId);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
    console.log(`üåê –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId} –∏–∑ KeyCRM`);
    try {
        const company = await keycrm(`/companies/${companyId}?include=custom_fields`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        companiesCache.set(companyId, company);
        
        return company;
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}:`, err.message);
        return null;
    }
}

// --- –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ ¬´–∫–∞–Ω–æ–Ω¬ª –¥–ª—è —Å–≤–µ—Ä–∫–∏
function mapBuyer(b) {
    // —Ä–∞–∑–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
    const id = (b && b.id) || (b && b.buyer_id) || null;
    const name =
        (b && b.name) ||
        (b && b.full_name) ||
        (b && b.fullname) ||
        (b && b.first_name && b.last_name ? `${b.first_name || ""} ${b.last_name || ""}`.trim() : "");

    const phones = ensureArray((b && b.phone) || (b && b.phones))
        .map(normalizeUaPhone)
        .filter(Boolean);
    const emails = ensureArray((b && b.email) || (b && b.emails))
        .map(normalizeEmail)
        .filter(Boolean);

    // ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ buyer (–ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–¥–µ—Å—å!)
    const companyId = (b && b.company_id) || null;

    // –∫–ª—é—á–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ email –∏–∑ buyer)
    const dedupe = [
        ...phones.map((p) => `tel:${p}`),
        ...emails.map((e) => `email:${e}`),
    ];

    return {
        id,
        name,
        phones,
        emails,
        companyId, // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID, –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
        dedupe
    };
}

// ================== ROUTES ==================

// Health check —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–∞ –∏ –∫–µ—à–∞
app.get("/", (req, res) => {
    res.json({
        status: "ok",
        hasApiKey: !!KEYCRM_API_KEY,
        apiKeyLength: KEYCRM_API_KEY ? KEYCRM_API_KEY.length : 0,
        apiKeyPreview: KEYCRM_API_KEY ? `${KEYCRM_API_KEY.slice(0, 8)}...${KEYCRM_API_KEY.slice(-8)}` : null,
        cache: {
            companies_cached: companiesCache.size
        },
        timestamp: new Date().toISOString()
    });
});

// –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∫–æ–º–ø–∞–Ω–∏–π
app.post("/cache/clear", (req, res) => {
    const beforeCompanies = companiesCache.size;
    
    companiesCache.clear();
    
    console.log(`üóëÔ∏è  –ö–µ—à –æ—á–∏—â–µ–Ω (–∫–æ–º–ø–∞–Ω–∏–π: ${beforeCompanies})`);
    
    res.json({ 
        message: "–ö–µ—à –æ—á–∏—â–µ–Ω",
        cleared: {
            companies: beforeCompanies
        }
    });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
// –ü—Ä–∏–º–µ—Ä: GET /companies?page=1&per_page=100
app.get("/companies", async(req, res) => {
    try {
        const page = req.query.page || 1;
        const per_page = req.query.per_page || 100;
        
        const qs = new URLSearchParams({
            page: String(page),
            per_page: String(per_page),
            include: 'custom_fields' // –í–∞–∂–Ω–æ! –ü–æ–ª—É—á–∞–µ–º extrafields
        }).toString();
        
        const json = await keycrm(`/companies?${qs}`);
        
        res.json(json);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π:", err);
        res.status(500).json({ error: String(err.message || err) });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
// –ü—Ä–∏–º–µ—Ä: GET /companies/all?max=5000
app.get("/companies/all", async(req, res) => {
    try {
        const max = Number(req.query.max) || 5000;
        const perPage = 100;
        let page = 1;
        const acc = [];
        
        console.log(`üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–π (–º–∞–∫—Å: ${max}, per_page: ${perPage})`);
        
        while (acc.length < max && page <= 100) {
            console.log(`   –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}...`);
            
            const qs = new URLSearchParams({
                page: String(page),
                per_page: String(perPage),
                include: 'custom_fields'
            }).toString();
            
            const json = await keycrm(`/companies?${qs}`);
            const raw = toArray(json);
            
            console.log(`   ‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: –ø–æ–ª—É—á–µ–Ω–æ ${raw.length} –∫–æ–º–ø–∞–Ω–∏–π`);
            
            if (raw.length === 0) {
                console.log(`   ‚ö† –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –ø—É—Å—Ç–∞—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º`);
                break;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            for (const company of raw) {
                if (company.id) {
                    companiesCache.set(company.id, company);
                }
            }
            
            acc.push(...raw);
            page++;
            
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        console.log(`üìä –°–æ–±—Ä–∞–Ω–æ ${acc.length} –∫–æ–º–ø–∞–Ω–∏–π (–≤ –∫–µ—à–µ: ${companiesCache.size})`);
        
        res.json({
            total: acc.length,
            cached: companiesCache.size,
            pages_processed: page - 1,
            data: acc.slice(0, max)
        });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–π:", err);
        res.status(500).json({ error: String(err.message || err) });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ ID (—Å –∫–µ—à–µ–º)
// –ü—Ä–∏–º–µ—Ä: GET /companies/12345
app.get("/companies/:companyId", async(req, res) => {
    try {
        const { companyId } = req.params;

        if (!companyId) {
            return res.status(400).json({ error: "companyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        const company = await getCompanyById(companyId);
        
        if (!company) {
            return res.status(404).json({ error: "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        res.json(company);
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ${req.params.companyId}:`, err);
        res.status(500).json({ error: String(err.message || err) });
    }
});

// RAW –¥–∞–Ω–Ω—ã–µ –∏–∑ KeyCRM ‚Äî –≤—Å–µ –ø–æ–ª—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
// –ü—Ä–∏–º–µ—Ä: GET /buyers/raw?page=1&per_page=5
app.get("/buyers/raw", async(req, res) => {
            try {
                const qs = new URLSearchParams(req.query).toString();
                const json = await keycrm(`/buyer${qs ? `?${qs}` : ""}`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–∑ KeyCRM
    res.json(json);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: String(err.message || err) });
  }
});

// 1) –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–∞ GET /buyer (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º)
// –ü—Ä–∏–º–µ—Ä: GET /buyers?search=%2B380501234567&page=1&per_page=100
app.get("/buyers", async(req, res) => {
            try {
                const qs = new URLSearchParams(req.query).toString();
                const json = await keycrm(`/buyer${qs ? `?${qs}` : ""}`);
    const raw = toArray(json);
    const data = raw.map(mapBuyer);
    res.json({ count: data.length, data, raw }); // raw –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: String(err.message || err) });
  }
});

// 2) –°–±–æ—Ä ¬´–≤—Å–µ—Ö¬ª –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–æ –ª–∏–º–∏—Ç–∞)
// –ü—Ä–∏–º–µ—Ä: GET /buyers/all?search=&max=5000
app.get("/buyers/all", async (req, res) => {
  try {
    const search = req.query.search || "";
    const perPage = 15; // KeyCRM –æ—Ç–¥–∞—ë—Ç –ø–æ 15 –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const max = Number(req.query.max) || 10000;
    let page = 1;

    const acc = [];
    console.log(`üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å: ${max}, per_page: ${perPage})`);

    while (acc.length < max && page <= 1000) {
      console.log(`   –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}...`);

      const qs = new URLSearchParams({
        ...(search ? { search } : {}),
        page: String(page),
        per_page: String(perPage),
      }).toString();

      const json = await keycrm(`/buyer?${qs}`);
      const raw = toArray(json);
      
      console.log(`   ‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: –ø–æ–ª—É—á–µ–Ω–æ ${raw.length} –∑–∞–ø–∏—Å–µ–π`);

      // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
      if (raw.length === 0) {
        console.log(`   ‚ö† –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –ø—É—Å—Ç–∞—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º`);
        break;
      }

      acc.push(...raw);
      page++;

      // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 429 Too Many Requests
      await new Promise(resolve => setTimeout(resolve, 800));
    }

    console.log(`üìä –°–æ–±—Ä–∞–Ω–æ ${acc.length} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π`);

    // –ú–∞–ø–ø–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
    const data = acc.slice(0, max).map(buyer => mapBuyer(buyer));

    console.log(`‚úÖ –ò–¢–û–ì–û —Å–æ–±—Ä–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: ${data.length} (–∑–∞–ø—Ä–æ—à–µ–Ω–æ: ${max}, —Å—Ç—Ä–∞–Ω–∏—Ü: ${page - 1})`);

    res.json({
      total: data.length,
      pages_processed: page - 1,
      per_page: perPage,
      search: search || null,
      data,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:", err);
    res.status(500).json({ error: String(err.message || err) });
  }
});app.get("/test-keycrm", async(req, res) => {
    try {
        // –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é
        const page1 = await keycrm("/buyer?page=1&per_page=100");

        // –ó–∞–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const page2 = await keycrm("/buyer?page=2&per_page=100");

        res.json({
            page1_count: toArray(page1).length,
            page1_meta: page1.meta || "–Ω–µ—Ç meta",
            page2_count: toArray(page2).length,
            page2_meta: page2.meta || "–Ω–µ—Ç meta",
            page1_sample: toArray(page1).slice(0, 2), // –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.get("/test-pages", async(req, res) => {
    try {
        const results = [];
        
        // –ó–∞–ø—Ä–æ—Å–∏–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
        for (let p = 1; p <= 5; p++) {
            const json = await keycrm(`/buyer?page=${p}&per_page=15`);
            const data = toArray(json);
            results.push({
                page: p,
                count: data.length,
                has_data: data.length > 0
            });
            
            if (data.length === 0) break;
        }
        
        res.json({
            pages_tested: results,
            total_unique_buyers: results.reduce((sum, r) => sum + r.count, 0)
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ================== START ==================
app.listen(PORT, () => {
    console.log(`üöÄ API –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
    console.log(`‚Üí GET  /                       (health check + —Å—Ç–∞—Ç—É—Å –∫–µ—à–∞)`);
    console.log(`‚Üí GET  /buyers                 (–ø—Ä–æ–∫—Å–∏ KeyCRM GET /buyer)`);
    console.log(`‚Üí GET  /buyers/raw             (RAW –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)`);
    console.log(`‚Üí GET  /buyers/all             (–≤—Å–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)`);
    console.log(`‚Üí GET  /companies              (—Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)`);
    console.log(`‚Üí GET  /companies/all          (–≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ + –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)`);
    console.log(`‚Üí GET  /companies/:id          (–ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ ID —Å –∫–µ—à–µ–º)`);
    console.log(`‚Üí POST /cache/clear            (–æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∫–æ–º–ø–∞–Ω–∏–π)`);
});